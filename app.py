import os
import warnings

import joblib
import numpy as np
import pandas as pd
import pefile
import streamlit as st
import torch
from streamlit_lottie import st_lottie

warnings.filterwarnings("ignore")


def extract_structure_features(file_path):
    pe = pefile.PE(file_path)
    features = {
        "file_size": pe.OPTIONAL_HEADER.SizeOfImage,
        "file_format": pe.FILE_HEADER.Machine,
        "num_sections": len(pe.sections),
        "dos_header_magic": pe.DOS_HEADER.e_magic,
        "dos_header_lfanew": pe.DOS_HEADER.e_lfanew,
        "pe_header_signature": pe.NT_HEADERS.Signature,
        "pe_header_machine": pe.NT_HEADERS.FILE_HEADER.Machine,
        "pe_header_number_of_sections": pe.NT_HEADERS.FILE_HEADER.NumberOfSections,
    }
    section_features = {}
    for i, section in enumerate(pe.sections):
        section_name = section.Name.decode().rstrip("\x00")
        section_features[f"section_{i+1}_name"] = section_name
        section_features[f"section_{i+1}_size"] = section.SizeOfRawData
        section_features[
            f"section_{i+1}_characteristics"
        ] = section.Characteristics

    features["sections"] = section_features

    import_table = {}
    if hasattr(pe, "DIRECTORY_ENTRY_IMPORT"):
        for entry in pe.DIRECTORY_ENTRY_IMPORT:
            if entry.dll is not None:
                import_table[entry.dll.decode()] = [
                    imp.name.decode() if imp.name is not None else ""
                    for imp in entry.imports
                ]
    features["import_table"] = import_table
    export_table = {}
    if hasattr(pe, "DIRECTORY_ENTRY_EXPORT"):
        export_table["name"] = (
            pe.DIRECTORY_ENTRY_EXPORT.name.decode()
            if pe.DIRECTORY_ENTRY_EXPORT.name is not None
            else ""
        )
        features["export_table"] = export_table
    return features


def save_uploaded_file(uploaded_file):
    with open("output_file.txt", "wb") as f:
        f.write(uploaded_file.getvalue())
    st.write("Upload file successfully!")


def load_model():
    return joblib.load("./xgb_pipeline.pkl")


def predict_malware(df, model):
    noti = f"Result:"
    try:
        y_pred = model.predict(df)
        if y_pred[0] == 1:
            st.write(f"{noti} Malware Detected")
        else:
            st.write(f"{noti} No Malware Detected")
    except Exception as e:
        st.write(f"Error: {e}")


def main():
    os.system("cls")
    st_lottie(
        "https://lottie.host/62f12ee8-5fce-4f5e-bde3-588d986741aa/e2Yh2lFrps.json"
    )
    st.balloons()
    st.title("Malware Detection")
    st.info(
        "This is a simple project to detect malware using XGBoost and Streamlit developed by ZhugeZ."
    )
    uploaded_file = st.file_uploader("Upload your file here to ...")
    model = load_model()
    if uploaded_file is not None:
        try:
            save_uploaded_file(uploaded_file)
            df = extract_structure_features("output_file.txt")
            df = pd.DataFrame(df, index=[0]).rename(
                columns=lambda x: x.replace("_", " ").title()
            )
            if "Export Table" not in df.columns:
                df["Export Table"] = "Nothing"
            if (
                "Import Table" not in df.columns
                or df["Import Table"].isnull().all()
            ):
                df["Import Table"] = "Nothing"
            # st.write(df.values)
            predict_malware(df, model)
        except Exception as e:
            st.write(f"Error: {e}")


if __name__ == "__main__":
    main()
